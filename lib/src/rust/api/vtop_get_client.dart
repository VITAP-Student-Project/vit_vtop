// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:meta/meta.dart' as meta;
import 'vtop/types/attendance.dart';
import 'vtop/types/biometric.dart';
import 'vtop/types/exam_schedule.dart';
import 'vtop/types/faculty.dart';
import 'vtop/types/hostel.dart';
import 'vtop/types/marks.dart';
import 'vtop/types/semester.dart';
import 'vtop/types/timetable.dart';
import 'vtop/vtop_client.dart';
import 'vtop/vtop_errors.dart';

VtopClient getVtopClient({
  required String username,
  required String password,
}) => RustLib.instance.api.crateApiVtopGetClientGetVtopClient(
  username: username,
  password: password,
);

Future<void> vtopClientLogin({required VtopClient client}) =>
    RustLib.instance.api.crateApiVtopGetClientVtopClientLogin(client: client);

Future<SemesterData> fetchSemesters({required VtopClient client}) =>
    RustLib.instance.api.crateApiVtopGetClientFetchSemesters(client: client);

Future<List<AttendanceRecord>> fetchAttendance({
  required VtopClient client,
  required String semesterId,
}) => RustLib.instance.api.crateApiVtopGetClientFetchAttendance(
  client: client,
  semesterId: semesterId,
);

Future<List<AttendanceDetailRecord>> fetchAttendanceDetail({
  required VtopClient client,
  required String semesterId,
  required String courseId,
  required String courseType,
}) => RustLib.instance.api.crateApiVtopGetClientFetchAttendanceDetail(
  client: client,
  semesterId: semesterId,
  courseId: courseId,
  courseType: courseType,
);

Future<List<TimetableSlot>> fetchTimetable({
  required VtopClient client,
  required String semesterId,
}) => RustLib.instance.api.crateApiVtopGetClientFetchTimetable(
  client: client,
  semesterId: semesterId,
);

Future<List<MarksRecord>> fetchMarks({
  required VtopClient client,
  required String semesterId,
}) => RustLib.instance.api.crateApiVtopGetClientFetchMarks(
  client: client,
  semesterId: semesterId,
);

Future<List<PerExamScheduleRecord>> fetchExamShedule({
  required VtopClient client,
  required String semesterId,
}) => RustLib.instance.api.crateApiVtopGetClientFetchExamShedule(
  client: client,
  semesterId: semesterId,
);

Future<Uint8List> fetchCookies({required VtopClient client}) =>
    RustLib.instance.api.crateApiVtopGetClientFetchCookies(client: client);

Future<bool> fetchIsAuth({required VtopClient client}) =>
    RustLib.instance.api.crateApiVtopGetClientFetchIsAuth(client: client);

Future<(bool, String)> fetchWifi({
  required String username,
  required String password,
  required int i,
}) => RustLib.instance.api.crateApiVtopGetClientFetchWifi(
  username: username,
  password: password,
  i: i,
);

Future<List<BiometricRecord>> fetchBiometricData({
  required VtopClient client,
  required String date,
}) => RustLib.instance.api.crateApiVtopGetClientFetchBiometricData(
  client: client,
  date: date,
);

Future<GetFaculty> fetchFacultySearch({
  required VtopClient client,
  required String searchTerm,
}) => RustLib.instance.api.crateApiVtopGetClientFetchFacultySearch(
  client: client,
  searchTerm: searchTerm,
);

Future<FacultyDetails> fetchFacultyData({
  required VtopClient client,
  required String empId,
}) => RustLib.instance.api.crateApiVtopGetClientFetchFacultyData(
  client: client,
  empId: empId,
);

Future<HostelOutingData> fetchHostelReport({required VtopClient client}) =>
    RustLib.instance.api.crateApiVtopGetClientFetchHostelReport(client: client);

Future<Uint8List> fetchHostelOuting({
  required VtopClient client,
  required String bookingId,
}) => RustLib.instance.api.crateApiVtopGetClientFetchHostelOuting(
  client: client,
  bookingId: bookingId,
);

Future<String> submitHostelOutingForm({
  required VtopClient client,
  required String purposeOfVisit,
  required String outingDate,
  required String contactNumber,
  required String outPlace,
  required String outTime,
}) => RustLib.instance.api.crateApiVtopGetClientSubmitHostelOutingForm(
  client: client,
  purposeOfVisit: purposeOfVisit,
  outingDate: outingDate,
  contactNumber: contactNumber,
  outPlace: outPlace,
  outTime: outTime,
);

Future<HostelLeaveData> leaveReport({required VtopClient client}) =>
    RustLib.instance.api.crateApiVtopGetClientLeaveReport(client: client);

Future<Uint8List> leaveReportDownload({
  required VtopClient client,
  required String leaveId,
}) => RustLib.instance.api.crateApiVtopGetClientLeaveReportDownload(
  client: client,
  leaveId: leaveId,
);
